clc
clear all;
close all;
%Start by generating the trajectory with inputs: final position in 3-space,
%the number of discretization steps, and the function type

%The function type is a power law scaling with the parameter

%Define the location of the home
xH = 0;
yH = 0;
zH = 0;
    %Define the final position (xF,yF,zF)
    %x_finalPrompt = 'What is the final x-position? ';
    %y_finalPrompt = 'What is the final y-position? ';
    %z_finalPrompt = 'What is the final z-position? ';
    %xF = input(x_finalPrompt); 
    %yF = input(y_finalPrompt);
    %zF = input(z_finalPrompt);
xF = 100;
yF = 100;
zF = 100;

%Define the number of discretization and the power law scaling behavior
    %N_prompt = 'How many discretization steps? ';
    %fxTypePrompt = 'What power law is desired? (Enter a real number) ';
    %nSteps = input(N_prompt);
    %fx_type = input(fxTypePrompt);
nSteps = 100;
fx_type = 2;

%Define the feedrate
    %feedRatePrompt = 'What is the desired feed rate? ';
    %feedRate = input(feedRatePrompt);
feedRate = 1000;

%Define the desired number of perturbation trials
    %NTrialsPrompt = 'How many perturbation trial samples are desired? (Total = N_trials^3) ';
    %N_Trials = input(NTrialsPrompt);
N_Trials = 3; %note that this will generate a 3x3x3 lattice

%Define the error in final position
    %PositionErrorPrompt = 'What is the upper bound on the final position error? ';
    %PosError = input(PositionErrorPrompt);
PosError = 10;
    
%Generate the appropriate parametrized trajectories
[x,y,z] = TrajectoryGeneratorV4(xF,yF,zF, xH, yH, zH, nSteps,fx_type);

%Plot the trajectories
figure(1);
TrajectoryPlotterV4(x,y,z,nSteps)

%Translate the trajectory to gcode
fileNamePrompt = 'What is the desired file name? '; 
file_name = input(fileNamePrompt,'s');
SaveFile = strcat(file_name,'.gcode');
folder_name = file_name
mkdir(folder_name) %make a new folder
TrajToGCodeV4(x,y,z,feedRate,nSteps,SaveFile)
movefile(SaveFile, folder_name); %move the file to the appropriate folder


%Generate perturbations and plot the perturbations

%Use this code if you are interested in an organized 3-dimensional array of
%perturbed trajectories. If you are interested in a set of random
%perturbations contained within the defined erro cube, comment out this
%code and proceed to the random trajectory generator
figure(2);
TrajPerturbationV4(N_Trials, xF, yF, zF,xH,yH,zH, nSteps, fx_type,PosError,...
    feedRate,file_name)
MoveToFolderV4(N_Trials,file_name,file_name)

%%
for i = 0:1:N_Trials-1
    for j = 0:1:N_Trials - 1
        for k = 0:1:N_Trials - 1
            fileToMove = strcat(file_name,'Perturbation',num2str(i),...,
                    num2str(j),num2str(k),'.gcode'); 
            movefile(fileToMove,file_name)
        end
    end
end

%% Random Trajectory Generator
%Use this code if you are interested in generating random perturbations
%Ask the user for the upper bound on the final power law scaling behavior

%PowerErrorPrompt = 'What is the upper bound on the power law scaling error? ';
%PowError = input(PowerErrorPrompt);

%figure(2);
%for i=1:1:N_Trials %Run the loop according to the number of trials selected
    %[xPert,yPert,zPert] = ...
        %RandTrajectoryPerturbationV4(xF,yF,zF,xH,yH,zH,nSteps,fx_type,PosError,PowError);
    %plot3(xPert,yPert,zPert) %Plot the perturbed trajectories
    %xlabel('x')
    %ylabel('y')
    %zlabel('z')
    %hold on
    %plot3(xPert(end),yPert(end),zPert(end),'ro')
    %hold on
    %errorCubeV4(xF,yF,zF,PosError) %Plot the error cube
    %hold on
    
    %Generate the name of the file to save
    %To generate a reasonable file name, add 'Perturbation' to the name of
    %the file containing the gcode defining the trajectory with the exact
    %final endpoint, followed by a number 1,2,...,N_trials. This gcode file
    %will describe the ith perturbation to the original trajectory
    
    %i_name = strcat(file_name,'RandPerturbation',num2str(i),'.gcode'); 

    %Translate the perturbed trajectory to gcode
    %TrajToGCodeV4(x,y,z,feedRate,nSteps,i_name)
%end