// Generated by gencpp from file data_manager/metadata.msg
// DO NOT EDIT!


#ifndef DATA_MANAGER_MESSAGE_METADATA_H
#define DATA_MANAGER_MESSAGE_METADATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace data_manager
{
template <class ContainerAllocator>
struct metadata_
{
  typedef metadata_<ContainerAllocator> Type;

  metadata_()
    : traj_folder()
    , test_type()
    , curr_file()  {
    }
  metadata_(const ContainerAllocator& _alloc)
    : traj_folder(_alloc)
    , test_type(_alloc)
    , curr_file(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _traj_folder_type;
  _traj_folder_type traj_folder;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _test_type_type;
  _test_type_type test_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _curr_file_type;
  _curr_file_type curr_file;





  typedef boost::shared_ptr< ::data_manager::metadata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_manager::metadata_<ContainerAllocator> const> ConstPtr;

}; // struct metadata_

typedef ::data_manager::metadata_<std::allocator<void> > metadata;

typedef boost::shared_ptr< ::data_manager::metadata > metadataPtr;
typedef boost::shared_ptr< ::data_manager::metadata const> metadataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_manager::metadata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_manager::metadata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace data_manager

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'data_manager': ['/media/woodlab/DATAPART1/watertank-gantry/ROS/catkin_ws/src/data_manager/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::data_manager::metadata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_manager::metadata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_manager::metadata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_manager::metadata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_manager::metadata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_manager::metadata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_manager::metadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0a7f8ee6e43bf6a0f98c30689b71546";
  }

  static const char* value(const ::data_manager::metadata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0a7f8ee6e43bf6aULL;
  static const uint64_t static_value2 = 0x0f98c30689b71546ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_manager::metadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_manager/metadata";
  }

  static const char* value(const ::data_manager::metadata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_manager::metadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string traj_folder\n\
string test_type\n\
string curr_file\n\
";
  }

  static const char* value(const ::data_manager::metadata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_manager::metadata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj_folder);
      stream.next(m.test_type);
      stream.next(m.curr_file);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct metadata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_manager::metadata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_manager::metadata_<ContainerAllocator>& v)
  {
    s << indent << "traj_folder: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.traj_folder);
    s << indent << "test_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.test_type);
    s << indent << "curr_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.curr_file);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_MANAGER_MESSAGE_METADATA_H
