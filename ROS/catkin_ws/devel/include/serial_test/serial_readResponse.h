// Generated by gencpp from file serial_test/serial_readResponse.msg
// DO NOT EDIT!


#ifndef SERIAL_TEST_MESSAGE_SERIAL_READRESPONSE_H
#define SERIAL_TEST_MESSAGE_SERIAL_READRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_test
{
template <class ContainerAllocator>
struct serial_readResponse_
{
  typedef serial_readResponse_<ContainerAllocator> Type;

  serial_readResponse_()
    : miliseconds(0)
    , rate(0)
    , data()  {
    }
  serial_readResponse_(const ContainerAllocator& _alloc)
    : miliseconds(0)
    , rate(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _miliseconds_type;
  _miliseconds_type miliseconds;

   typedef uint32_t _rate_type;
  _rate_type rate;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::serial_test::serial_readResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_test::serial_readResponse_<ContainerAllocator> const> ConstPtr;

}; // struct serial_readResponse_

typedef ::serial_test::serial_readResponse_<std::allocator<void> > serial_readResponse;

typedef boost::shared_ptr< ::serial_test::serial_readResponse > serial_readResponsePtr;
typedef boost::shared_ptr< ::serial_test::serial_readResponse const> serial_readResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_test::serial_readResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_test::serial_readResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace serial_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'serial_test': ['/media/woodlab/DATAPART1/watertank-gantry/ROS/catkin_ws/src/serial_test/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::serial_test::serial_readResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_test::serial_readResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_test::serial_readResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_test::serial_readResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_test::serial_readResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_test::serial_readResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_test::serial_readResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b191cc1f130fc908db72dc38712947ff";
  }

  static const char* value(const ::serial_test::serial_readResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb191cc1f130fc908ULL;
  static const uint64_t static_value2 = 0xdb72dc38712947ffULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_test::serial_readResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_test/serial_readResponse";
  }

  static const char* value(const ::serial_test::serial_readResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_test::serial_readResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 miliseconds\n\
uint32 rate\n\
uint16[] data\n\
\n\
";
  }

  static const char* value(const ::serial_test::serial_readResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_test::serial_readResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.miliseconds);
      stream.next(m.rate);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct serial_readResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_test::serial_readResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_test::serial_readResponse_<ContainerAllocator>& v)
  {
    s << indent << "miliseconds: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.miliseconds);
    s << indent << "rate: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rate);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_TEST_MESSAGE_SERIAL_READRESPONSE_H
